//
//  HashTable.m
//  Algorithms
//
//  Created by 储诚鹏 on 2018/5/14.
//  Copyright © 2018年 储诚鹏. All rights reserved.
//

#import "HashTable.h"

/*
 * 哈希法就是将本身的键值，通过特定的数学函数运算或使用其他方法，转换成相应的数据存储地址。
 
 ** 相关名词 **
 * bucket(桶)：哈希表中存储数据的位置，每一个位置对应到唯一的一个地址(bucket address)。
 * slot(槽)：每一个bucket中可能包含多个字段，slot指的就是bucket中的字段
 * collision(碰撞)：若两个不同的数据，经过哈希函数运算后，对应到相同的地址时，就成为碰撞
 * 溢出: 如果数据哈希函数运算后，所对应的bucket已满，则会使bucket发生溢出
 * 哈希表:存储记录的连续内存。哈希表是一种类似数据表的索引表格。
 * synonym(同义词):a != b, f(a) == f(b),则a,b对于函数f是同义词
 * loading factor(加载密度)：标识符的使用数目除以哈希表内槽的总数。加载密度大，溢出和碰撞的概率高，空间使用率高。
 * perfect hashing(完美哈希)：没有碰撞，也没有溢出的哈希函数
 
 ** 哈希函数设计原则
 * 降低碰撞和溢出的产生
 * 哈希函数不宜过于复杂，越容易计算越佳
 * 尽量把文字的键值转换成数字的键值，以利于哈希函数的运算
 * 所设计的哈希函数计算所得到的值，尽量均匀的分布到每一个桶中，不要太过于集中在某个桶中。
 */

/*
 ********************************************哈希函数****************************************
 * 直接定址法
 * f(key) = a * key + b
 
 * 平方取中法
 * 假设关键字是R进制数（如十进制）。并且哈希表中可能出现的关键字都是事先知道的，则可选取关键字的若干数位组成哈希地址。
   选取的原则是使得到的哈希地址尽量避免冲突，即所选数位上的数字尽可能是随机的。
 
 * 除留余数法
 * 取关键字被某个不大于哈希表表长m的p除后所得的余数为哈希地址
 * f(key) = key % p (p <= m)
 * p一般选择为素数,表长一般为数据总长度的根号2倍
 
 * 随机数法
 * f(key) = random(key)
 
 * 折叠法
 ***
 移动折叠法
  f(a) = 2365479125443
  -> 2365 4791 2544 3
  -> 2365 + 4791 + 2544 + 3 = 9703(bucket address)
 边界折叠法(folding at the boundaries)1
 偶数反转:
  -> 2365 + 4791 +4452 + 3(bucket address)
 奇数反转:
 -> 5632 + 1974 + 2544 + 3(bucket address)
 ***
 
 * 数字分析法
 * 适用于数据不会更改，且为数字类型的静态表。
 */

/*
 ********************************************冲突解决****************************************
 * 开发定址法
 * 如果两个数据元素的哈希值相同，则在哈希表中为后插入的数据选择另外一个表项
 
 * 拉链法
 * 将哈希值相同的数据元素存放在一个链表中，在查找哈希表的过程中，当查找到这个链表时，必须采用线性查找方法
   在这种方法中，哈希表中的每个单元不再是记录本身，而是相应同义词单链表的头指针
 */

